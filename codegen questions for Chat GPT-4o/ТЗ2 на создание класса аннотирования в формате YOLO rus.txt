Напиши класс на C# для создания аннотаций в формате YOLO.
Этот класс должен быть наследован от списка: public class YoloAnnotation : List<AnnotatedImage>
Должен присутствовать метод добавляющий аннотацию нового изображения public void AddNewAnnotatedImage(Bitmap image, List<AnnotatedObject> objects): 
1. изображение класса Bitmap
2. список структур, содержащих класс аннотированного объекта + его центр + координаты верхнего левого угла + координаты нижнего правого угла
внутри должны присутствовать необходимые преобразования по нормализации центра и размеров согласно формата yolo.
Необходимо реализовать метод public void SaveToPath(string path), который сохранит подготовленные данные в указанную папку в формате YOLO.
Дополнительно реализовать класс public class AnnotatedImage.
Конструктор класса: public AnnotatedImage(Bitmap image, List<AnnotatedObject> objects)

Класс AnnotatedObject:
public class AnnotatedObject
{
    public int Class { get; set; }
    public float XCenter { get; set; }
    public float YCenter { get; set; }
    public float Width { get; set; }
    public float Height { get; set; }
}

Ultralytics YOLO format:
The Ultralytics YOLO format is a dataset configuration format that allows you to define the dataset root directory, the relative paths to training/validation/testing image directories or *.txt files containing image paths, and a dictionary of class names. 
Here is an example:

Structure your custom YOLO dataset for the training. For the object detection task, the working solution is:
dataset/
|-- train/
| |-- images/
| |-- labels/
|-- val/
| |-- images/
| |-- labels/
|-- test/
| |-- images/
| |-- labels/
|-- classes.txt
|-- coco8.yaml
|-- notes.json

# Sample of "classes.txt" (10 classes)
0
1
etc.

# Sample of "coco8.yaml" (10 classes)
names:
  - 1
  - 2
etc.

path: <absolute path>
nc: 10 # Number of classes
test: images
train: images
val: images

# Sample of "notes.json" (10 classes)
{
  "categories": [
    {
      "id": 0,
      "name": "0"
    },
    {
      "id": 1,
      "name": "1"
    }
	etc.
  ],
  "info": {
    "year": 2024,
    "version": "1.0",
    "contributor": "Your Name"
  }
}

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/coco8  # dataset root dir
train: images/train  # train images (relative to 'path') some images + labels
val: images/val  # val images (relative to 'path') some images + labels
test:  # test images (optional)  some images + labels

Labels for this format should be exported to YOLO format with one *.txt file per image. 
If there are no objects in an image, no *.txt file is required. 
The *.txt file should be formatted with one row per object in class x_center y_center width height format. 
Box coordinates must be in normalized xywh format (from 0 to 1). 
If your boxes are in pixels, you should divide x_center and width by image width, and y_center and height by image height. 
Class numbers should be zero-indexed (start with 0).

Next, an example of a text file '<image file name>.txt' from any 'labels' folder, highlighting four objects of class 6 and four objects of class 8:

6 0.24678466815872227 0.48833504450187376 0.03210406306174097 0.15255390734930394
6 0.27638520336702477 0.4811680824116381 0.031220464995821543 0.16484012807542223

The general format of a YOLO format line looks like:
<class number> <x center> <y center> <width> <height>
where:
<object-class> is an integer representing the class of the object. The class index should start from 0 and increase by 1 for each unique class in the dataset.
<x-center> and <y-center> are the coordinates of the center of the bounding box, normalized by the width and height of the image, respectively. The values should be in the range of [0, 1].
<width> and <height> are the width and height of the bounding box, normalized by the width and height of the image, respectively. The values should be in the range of [0, 1].