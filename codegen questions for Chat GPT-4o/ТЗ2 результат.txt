Here is a C# class that creates annotations in YOLO format:

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;

public class YoloAnnotation : List<AnnotatedImage>
{
    public void AddNewAnnotatedImage(Bitmap image, List<AnnotatedObject> objects)
    {
        var annotatedImage = new AnnotatedImage(image, objects);
        this.Add(annotatedImage);
    }

    public void SaveToPath(string path)
    {
        foreach (var annotatedImage in this)
        {
            var imagePath = Path.Combine(path, "images", annotatedImage.ImageName);
            Directory.CreateDirectory(Path.GetDirectoryName(imagePath));
            annotatedImage.Image.Save(imagePath);

            var labelPath = Path.Combine(path, "labels", $"{annotatedImage.ImageName}.txt");
            using (var writer = new StreamWriter(labelPath))
            {
                foreach (var obj in annotatedImage.Objects)
                {
                    writer.WriteLine($"{obj.Class} {obj.XCenter} {obj.YCenter} {obj.Width} {obj.Height}");
                }
            }
        }

        // Create classes.txt
        var classesPath = Path.Combine(path, "classes.txt");
        using (var writer = new StreamWriter(classesPath))
        {
            for (int i = 0; i < GetMaxClass(); i++)
            {
                writer.WriteLine(i);
            }
        }

        // Create coco8.yaml
        var yamlPath = Path.Combine(path, "coco8.yaml");
        using (var writer = new StreamWriter(yamlPath))
        {
            writer.WriteLine("names:");
            for (int i = 0; i < GetMaxClass(); i++)
            {
                writer.WriteLine($"  - {i}");
            }
            writer.WriteLine($"path: {path}");
            writer.WriteLine($"nc: {GetMaxClass()}");
            writer.WriteLine("test: images");
            writer.WriteLine("train: images");
            writer.WriteLine("val: images");
        }

        // Create notes.json
        var jsonPath = Path.Combine(path, "notes.json");
        using (var writer = new StreamWriter(jsonPath))
        {
            writer.WriteLine("{");
            writer.WriteLine("  \"categories\": [");
            for (int i = 0; i < GetMaxClass(); i++)
            {
                writer.WriteLine($"    {{\"id\": {i}, \"name\": \"{i}\"}},");
            }
            writer.WriteLine("  ],");
            writer.WriteLine("  \"info\": {");
            writer.WriteLine("    \"year\": 2024,");
            writer.WriteLine("    \"version\": \"1.0\",");
            writer.WriteLine("    \"contributor\": \"Your Name\"");
            writer.WriteLine("  }");
            writer.WriteLine("}");
        }
    }

    private int GetMaxClass()
    {
        var maxClass = 0;
        foreach (var annotatedImage in this)
        {
            foreach (var obj in annotatedImage.Objects)
            {
                if (obj.Class > maxClass) maxClass = obj.Class;
            }
        }
        return maxClass + 1;
    }

    public class AnnotatedImage
    {
        public Bitmap Image { get; set; }
        public string ImageName { get; set; }
        public List<AnnotatedObject> Objects { get; set; }

        public AnnotatedImage(Bitmap image, List<AnnotatedObject> objects)
        {
            Image = image;
            ImageName = Guid.NewGuid().ToString() + ".jpg";
            Objects = objects;

            foreach (var obj in objects)
            {
                obj.XCenter /= image.Width;
                obj.YCenter /= image.Height;
                obj.Width /= image.Width;
                obj.Height /= image.Height;
            }
        }
    }

    public class AnnotatedObject
    {
        public int Class { get; set; }
        public float XCenter { get; set; }
        public float YCenter { get; set; }
        public float Width { get; set; }
        public float Height { get; set; }
    }
}
Here's an example of how to use this class:

var yoloAnnotation = new YoloAnnotation();

// Create a bitmap image
var image = new Bitmap(800, 600);

// Create annotated objects
var objects = new List<YoloAnnotation.AnnotatedObject>
{
    new YoloAnnotation.AnnotatedObject { Class = 0, XCenter = 100, YCenter = 200, Width = 50, Height = 50 },
    new YoloAnnotation.AnnotatedObject { Class = 1, XCenter = 300, YCenter = 400, Width = 75, Height = 75 }
};

// Add the annotated image to the yolo annotation
yoloAnnotation.AddNewAnnotatedImage(image, objects);

// Save the yolo annotation to a path
yoloAnnotation.SaveToPath(@"C:\path\to\yolo\annotation");
This will create a directory structure with images and labels folders, and save the annotated image and its corresponding label file in YOLO format. The classes.txt, coco8.yaml, and notes.json files are also created.